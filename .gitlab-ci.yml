image: python:3.8  # Nutzt das Python 3.8 Docker-Image

stages:
  - build
  - test
  - lint
  - snyk_test
  - deploy

# Build Job (optional)
build-job:
  stage: build
  script:
    - echo "Compiling the code... (optional for Python projects)"
    - echo "Compile complete."

# Unit Test Job
unit-test-job:
  stage: test
  script:
    - echo "Installing dependencies..."
    - pip install pytest  # Installiere pytest
    - echo "Running unit tests..."
    - cd python_Calculator  # Wechsel in das richtige Verzeichnis
    - pytest --junitxml=report.xml  # Führe Tests aus und erzeuge eine JUnit-kompatible XML
  artifacts:
    when: always
    paths:
      - python_Calculator/report.xml  # Speichere den Testbericht

# Linting Job
lint-job:
  stage: lint
  script:
    - echo "Running Linting..."
    - pip install pylint  # Installiere pylint
    - cd python_Calculator  # Wechsel in das Verzeichnis, das deine Python-Dateien enthält
    - pylint calculator.py test_calculator.py --output-format=text > pylint-report.txt || true  # Linting und Ausgabe, aber ignoriere Fehler
  artifacts:
    when: always
    paths:
      - python_Calculator/pylint-report.txt  # Stelle sicher, dass der Pfad korrekt ist

# Snyk Security Test Job
snyk_test_job:
  stage: snyk_test
  image: snyk/snyk-cli:python-3.8  # Verwende das Snyk Python Docker Image
  script:
    - echo "Running Snyk security tests..."
    - cd python_Calculator  
    - snyk auth $SNYK_TOKEN  # Authentifiziere mit deinem Snyk Token
    - snyk test --file=requirements.txt  # Führe den Sicherheitscheck für die Python-Abhängigkeiten durch
  only:
    - main  
  variables:
    SNYK_TOKEN: $SNYK_TOKEN
  allow_failure: true  # Lasse den Build weiterlaufen, auch wenn Sicherheitslücken gefunden werden

# Deployment Job (optional)
deploy-job:
  stage: deploy
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
