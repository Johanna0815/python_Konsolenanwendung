image: python:3.8  # Nutzt das Python 3.8 Docker-Image

stages:
  - build
  - test
  - deploy

# Build Job (optional)
build-job:
  stage: build
  script:
    - echo "Compiling the code... (optional for Python projects)"
    - echo "Compile complete."

# Unit Test Job
unit-test-job:
  stage: test
  script:
    - echo "Installing dependencies..."
    - pip install pytest  # Installiere pytest
    - echo "Running unit tests..."
    - cd python_Calculator  # Wechsel in das richtige Verzeichnis
    - pytest --junitxml=report.xml  # Führe Tests aus und erzeuge eine JUnit-kompatible XML
  artifacts:
    when: always
    paths:
      - python_Calculator/report.xml  # Speichere den Testbericht




# Linting Job
lint-job:
  stage: test
  script:
    - echo "Running Linting..."
    - pip install pylint  # Installiere pylint
    - cd python_Calculator  # Wechsel in das Verzeichnis, das deine Python-Dateien enthält
    - pylint calculator.py test_calculator.py --output-format=text > pylint-report.txt  # Linting und Ausgabe
  artifacts:
    when: always
    paths:
      - python_Calculator/pylint-report.txt  # Stelle sicher, dass der Pfad korrekt ist



# Deployment Job (optional)
deploy-job:
  stage: deploy
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."

