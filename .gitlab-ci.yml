image: python:3.8

stages:
  - build
  - test
  - lint
  - snyk_test
  - snyk_fix

# Build Job
build-job:
  stage: build
  script:
    - python -m pip install --upgrade pip
    - pip install -r python_Calculator/requirements.txt

# Unit Test Job
unit-test-job:
  stage: test
  script:
    - python -m pip install --upgrade pip
    - pip install -r python_Calculator/requirements.txt
    - python -m unittest discover -s python_Calculator
  artifacts:
    when: always
    paths:
      - python_Calculator/test_results.out

# Linting Job
lint-job:
  stage: lint
  script:
    - python -m pip install --upgrade pip
    - pip install flake8
    - flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    - flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  allow_failure: true  # L채sst den Build weiterlaufen, selbst wenn der Linting-Job Fehler findet

# Snyk Security Test Job
snyk_test_job:
  stage: snyk_test
  image: snyk/snyk-cli:python-3.8  # Verwende das Snyk Python Docker Image
  script:
    - snyk auth $SNYK_TOKEN
    - snyk test --package-manager=pip --file=python_Calculator/requirements.txt --severity-threshold=medium
  only:
    - main  
  variables:
    SNYK_TOKEN: $SNYK_TOKEN
  allow_failure: true  # L채sst den Build weiterlaufen, selbst wenn Snyk Sicherheitsl체cken findet

# Snyk Fix Job
snyk_fix_job:
  stage: snyk_fix
  image: snyk/snyk-cli:python-3.8  # Verwende das Snyk Python Docker Image
  script:
    - snyk auth $SNYK_TOKEN
    - snyk fix --file=python_Calculator/requirements.txt --dry-run
  only:
    - main
  variables:
    SNYK_TOKEN: $SNYK_TOKEN
  allow_failure: true  # L채sst den Build weiterlaufen, selbst wenn der Fix nicht angewendet wird
